
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split


np.random.seed(42)
hours = np.arange(0, 24)  # 24 hours in a day
base_usage = 0.3 + 0.05 * hours + 0.2 * np.sin(2 * np.pi * hours / 24)  # Base pattern
random_noise = np.random.normal(0, 0.05, size=24)
usage = base_usage + random_noise  # Simulated energy usage in kWh


data = pd.DataFrame({'Hour': hours, 'EnergyUsage_kWh': usage})


plt.figure(figsize=(10, 5))
plt.plot(data['Hour'], data['EnergyUsage_kWh'], marker='o', label='Simulated Usage')
plt.xlabel('Hour of Day')
plt.ylabel('Energy Usage (kWh)')
plt.title('Hourly Energy Usage')
plt.grid(True)
plt.legend()
plt.show()


X = data[['Hour']]
y = data['EnergyUsage_kWh']

model = LinearRegression()
model.fit(X, y)


data['PredictedUsage'] = model.predict(X)

best_hours = data.sort_values('PredictedUsage').head(3)['Hour'].tolist()
print("âœ… Suggested Low-Energy Usage Hours for Appliances:", best_hours)


plt.figure(figsize=(10, 5))
plt.plot(data['Hour'], data['EnergyUsage_kWh'], label='Actual', marker='o')
plt.plot(data['Hour'], data['PredictedUsage'], label='Predicted', linestyle='--')
plt.axvspan(best_hours[0]-0.5, best_hours[0]+0.5, color='green', alpha=0.3, label='Suggested Time')
plt.xlabel('Hour of Day')
plt.ylabel('Energy Usage (kWh)')
plt.title('Energy Usage Prediction and Recommendation')
plt.legend()
plt.grid(True)
plt.show()
